Things to know{

}

Things to remember{
    POJO - Plain Old Java Objects.
    ***(Ref\55.png) The output will be kick and bike class (absract class is not printed even the method is empty in the child class that is bike because child class methods are more imp than parent class.)
    in Java,
    We know that if you want to create the object or if you want to initialize the values, we can do that in constructor as well. Most of the time we do that, right?So if you want to assign the value initially when the object is created, we prefer to use constructor.
        Setters are good,but then if you want to assign the values later,setter makes sense.But if you want to assign the values as soon as you get the object, you can use constructor.
}
Intro{
    Java can be used for mobile developement, Web developement and Enterprise developement.

    Java is a strictly typed language.

}

Questions
{
    What kind of error will be thrown if the main method is not found in the Java program? Runtime Error.

    Which subsystem of the JVM is responsible for loading class files? ClassLoader.

    // What kind of error will be thrown if the main method is not found in the Java program? Convestion of data from lower to higher data types.
    
    default value assigned to boolean is False.

    class Main
    {

        public static void main(String []args){

        char ch = 'a';

        char result = (char)(ch + 1); //ch + 1 adds 1 to the numeric value of 'a' (97 + 1 = 98)   (char) casts the numeric result back to a character.

        System.out.println(result);

        }

    }
    ans is b.

    What does a high-order bit represent for an integer?Sign of the integer.

    What will happen if a local variable has the same name as an instance variable within a class? Local variable will hide the instance variable.

    (Ref\45.png)(Ref\Box.java).

    (Ref\46.png)(Ref\Patient.java).

    (Ref\52.png)

    println belongs to which class? Ans PrintStream class
}

Compiler{
    file name and class name can be different but while compiling you should enter file name then it will create .class file of class name and u should run with the class name.(Compile with file name, Run with class name).

    Compiler Just checks only syntax.
}

JDK,JRE,JVM (PPT\1.png){
    Check this(Ref\64.png)
    To compile a code u need a tool that tool is JDK
    JDK converts ur code to bite code.
    U will write the java code  and compile it and run on machine(ie.JVM)
    JVM is a machine which runs the code.
    why we need a JVM? to make the java platform independent we went for a virual layer on top of it.
    So most of the time ur code is dependent on some external files (not the files that u have created), u might have used some in-built classes,libraries etc.
    JVM and the extra libraries,in-built classes etc.. that we have used in our code combined called JRE(Java Run Time Environment).
    JRE is a Environment where you can run ur code. it also checks your byte code,validates.
    but ultimately ur code will run on JVM.
    JVM is a part of JRE.

    JVM is an abstract, it is not physically exist.
    Java is platform independent but JVM  is platform dependent.

    We have a machine to make java Platform independent we went for a virtual layer doesn't matter which machine u have JVM the idea is to have JVM on every machine.
}

Public Static Void Main (String args[]){
    Public - Public it is a access modifier, JVM should be able to call this method out side of the class.
    Static- Creating Space, it is the 1st one to load, it allows to call without creating a object of a class in which a main method is defined.
    Void- Doesn't return any value.
    Main - Main method is static.
    Main method is statcu because object is not created but still it is loaded.

    if the method is static no need of ref variable u can directly call that method like (Ref\1.png).
    if you are making a non static method without reference u cannot access.So to make that happen we have to make a referece of that class and then  call the method with that referece that we created. (Ref\2.png)

    String args[] is arguments that we pass in main method.
    args is just a name u can keep anything there. (Ref\3.png)(Ref\D36.java)
    arguments passes in String type.
    args[] is a array type variable which we can call as object of string.
    We use this String args[] when we want to pass information, even if we dont want to pass information we should include because it is a part of syntax.
}

javap{
    To see the source code u can enter javap (classname). (Ref\4.png)
    it is also called as java dissabmler.
}

Stack and Heap Memory{
    
    In JVM you have 2 types of memory 1.Stack Memory(1st in-last out) 2.Heap Memory. (Ref\5.png) 
    Stack Store memory in Key(name of the variable) and Value(value of the variable). (Ref\6.png)
    Check this. (Ref\7.2.png)line20 is not object it is a referece variable.So when we say new Claculator it will create a new object inside the heap memory. 
    Local variables are a part of a Stack,Instace variables are a part of Heap.
    Even the add method also sotres in Heap(it actually sotres the definition of add), but the actuall area that add will consume is Stack Memory. (Ref\8.png) 
    And that address of the object that created in heap memory is stored in the front of obj. (Ref\9.png)
    So that we can say there is a link between stack and heap, it will search for the add.
}

Instance Varibles{
    Check this. (PPT\3.png)
    By default instance variables value is 0.
}

Memory Occupied by differernt variables{
    Check this. (PPT\4.png)
    instance variables allocated in memory heap.
}

Local Variables{
    Check this. (PPT\2.png)
    Check this. (PPT\5.png)
}

Static Varibles{
    We can use them directly with the class name.variable name no need of creating the object.
    Check this. (PPT\6.png)
    We can change the value of static variable i.e it will take the updated value. (PPT\7.png)for ans check output only
}

Wrapper Classes means converting primitive into object and object into primitive{
    int --> Integer
    char --> Character
    long --> Long
    autoboxing-->primitive to object
    unboxing --> object to primitive
}

Datatypes {
    (Ref\10.png)
}

null{
    means the reference refers to nothing.
    Null is just value that a reference which is basically restricting a pointer.
}

Points{
    Character can be incremented by using integer (Ref\11.png)
    literals are the values that are given to the variables.
}

% operator{
    if the numerator is smaller than the denominator it will always give the value of numerator.
}

Type Casting{
    If it is happening automatically it is converting.
    Doing is Explicitly it is Casting.
    Implicit TypeConversion - Small to Big. 
    Explicit TypeCasting - Big to Small.
    We cannot store Character value into Boolean value, Because Boolean supports only True and False.
    From int to byte it will perform Modulus of that num by 256 and give remainder as output.
    Java supports type promotions i.e; it the result is out of byte it will promote it to integer. (Ref\12.png)
    Check this.(Ref\13.png) it behaves differently when u try to assign/fetch a value to it.
}

Ternary Operator {
    Check this(Ref\14.png).
}

Switch Case:{
    To not to use break statements we can use arrow or yelid (Ref\17.png)(Ref\16.png)
    Using switch case as expression (Ref\15.png)
}

Post and Pre increment{
    Check this (Ref\18.png).
}

While loop{ 
    loops till it returns false(while loops return ture or false).
    it runs till the condition is false.
}

Do-While 
{
    will always excecute once either the condition is true or false.
    So if we want the loop to excecute atleast once then we can use this loop.
    end the loop with semicolon(;).
    in the do block u should include increment or decrement operator or else it will go to infinite loop.
}

for{
    to use for loop as while loop u can use two semicolon's(Ref\19.png).
}

Which loop to use{
    if you know how many iteration you want to run then you can use For loop.
    if you want to read a file or database u can use while loop.
    if u want the loop to run atleast once then u can use do while loop.
}

void{
    void is used when ur  not expecting in return of that method.
}

return{
    if the codes see's return in any part of the code it will jump out out the code and return the value and it will stop the excecution of that method.
}

Array{
    Array is a collection of homogenous or similar datatypes.
    Length of array is defined whn it is created once created it is fixed we cannot change it.
    Check this (Ref\20.png)(Ref\21.png)(Ref\22.png)(Ref\23.png)(PPT\8.png)(PPT\9.png)(PPT\10.png)(PPT\11.png)(PPT\12.png)(PPT\13.png)(PPT\14.png)[(PPT\15.png)in second line"[[" means 2d array I means Integer ].
    Anonymus array Check this(Ref\24.png).

    What does arr[arr.length-1].length represents in a multidimensional array? length of last row in the array

    Jagged array(Ref\29.png)
    3D array(Ref\30.png)

    Array it is having fixedsize so to fix it u can craete new array of new length and copy that elements.
}

System.in{
    System.in in Scanner line is standard input object 
}

new keyword{
    the new keyword allocate memory for an object during runtime in Java.
}

Strings{
    Check this(Ref\25.png)(Ref\26.png)(Ref\27.png)(Ref\28.png)
    String is a class So to create it we need to do something similar to object creation. String name= new String("HI"); but u can do the normal way also even that will create a object for u. 

    String constant pool where it stores same Strings like s1="Teja", s2="Teja" here it will not create a new objcet for u. it will use the address of s1. to save memory.
    but if u do s="Sree"; s=s+"Teja"; then will will create a new object and it will allocate new address to it and the old one will be removed by garbage collection after sometime.(Ref\31.png)
    
    Strings are Immutable
    but u can use String buffer and string builder classes to create a mutable string
    String Immutable{
        Check this(PPT\16.png)
        Check this (Ref\38.png)
        Check this(PPT\17.png)
    }
    String class is Final (PPT\18.png)
    == and equalsto() are diff{
        Check this.(PPT\19.png)
        (Ref\39.png) output is equal.(because here it is in string constant pool)
        (Ref\40.png) output is not equal.(but here we are creating 2 new objects)
        (Ref\41.png) output is equal.
    }    

}

StringBuffer and StringBuilder{
    Check this(PPT\20.png)
    String buffer have 16bytes extra space even if u create a literal it will have 16+that literal size.(Ref\32.png)
    length and capacity are different
    we can convert string buffer to string using toString method.

    Diff btwn 3 Check this(Ref\42.png)

    String buffer is thread safe, stringbuilder is not thread safe.
}

equals method{
    it is used to compare the reference or address of 2 objects
    but in String class it will extend Object class and override equals method and use it for content comparision.
}

Math.random(){
    method in Java returns a double value.
}

Range: {
    The returned value is a pseudorandom number between 0.0 (inclusive) and 1.0 (exclusive).
}

Mutable and Immutable{
    Mutable means Changable
    Immutable means Unchangable
}

Diffferent type of Variables{
    Variable inside the method are local variable.
    Outside the method are instance variable.
    Static variable (outside method) if u want that value to be same for all then u can use static key word in fornt of that variable.
    (Ref\33.png)Here even we are changing the value of phone using on ref variable obj1 it is changing for both the obj's 
    Static variables should be called with the class name instead of obj u can call with the obj also but not adviced.
    In non static methods u can use static variables.
}

Different type of Methods{
    Methods without static key word are called instance methods.
    When ever u want to work with a non static methods we need to create obj of it so we can call static method directly with the help of the class name.
    we can use static variable inside a static method but u cant use non static variable. because it will change for every variable and obj that we refernced to it.where as static variables are same.but we can use it if u have the object reference we can use it.(Ref\34.png)
    That is the reason why main method is static, if the main method is not static we have to create a obj of that class. but main method is the 1st execution part in the code so that's the deadlock here.
}

Class{
    A Class is a blueprint for creating objects.
    Check this.(PPT\21.png)
}

Method{
    Check this.(PPT\22.png)
}

Object{
    An object is a real-word entity that has state and behaviour. 
    In other words, an object is a tangible thing that can be touch and feel, like a car or chair, etc. are the example of objects.
    Check this(PPT\23.png)
    Check this(PPT\24.png)
    Check this(PPT\25.png)
    Intialize object by method (PPT\26.png)(Ref\44.png)
    Intializing object by ref variable (Ref\43.png)
}

Static Block{
    Check this(Ref\35.png) in the out put it will print static 1st and constructor 2 times
    every time u create a object it will load the class 1st and objects are instantiated.
    the thing is class will be loaded once.
    JVM will have a special area named class loader it will have all the classes loaded.So when the 1st obj created it will load the class 1st and then the obj is created.So every time u load a class it will call the static block(Class loads only once so static block is also called once.)   
    if you dont create the obj it not not call the class as well.(didn't get)
    but u can do it by using Class.forName("nameoftheclass i.e, mobile")
}

Constructor{
    A constructor/Default Constructor looks like a method.
    Why default constructor is created to assign the default values to the instance variables of a class when an object is created.
    but no return type, name is same as class name[(Human) (capital)] also specify the access i.e, public.
    even if u dont call it, it will be called.
    Every time u create a object it will call the constructor.Even if there is no construtor created by u 
    U can assign ur own default values.
    Database connections are written in the constructor.
    Parameterized Constructor means constructor having parameter that are comming form the obj creation. (Ref\D2.java)
    Check this(Ref\47.png)
    (Ref\50.png) output of this is Democonstructor,0,null.
    So even if we dont create a constructor it will create a default constructor and it will default values of that instance variables(from the above code if we comment user defined constructor the output will be 0,null)

}

this keyword{
    this is a keyword that represents the current object.(current object means the object that is calling the method)(Ref\Demo.java)
    Check this(Ref\48.png)(Ref\49.png)
    Check this (Ref\Employee.java).
    Check this(Ref\51.png) here the output is Yash. because here display(); the compiler is automatically adding this.display(); while invoking the method

}

Anonymous Object{
    Objects without name. {new A();}
    we cannot re-use them
}

Inhertence{
    for inheritence u need a .class file not .java file.
    Reason why java dosen't support multiple inheritence is because it let say we have 3 classes A,B,C C is child and A,B are parents let say if both A and B have same methods and now when u create a object and try to call the method the java will be confused becasue it dont know who's method to use.
    Check this(PPT\27.png)(PPT\28.png)(PPT\29.png)(Ref\C.java)
    Imp(PPT\30.png)
    Tightly/Loosely coupled{
        Suppose if there are any changes in the parent class or child class(since it is inherting the properties)it means total dependency is there between that 2 classes. SO if there is any modification is done the entrire thing would be disturbed.
        tightly means total dependency is there between that 2 classes
        So if we are making any applications they should be loosely couple
    }
    In inheritence u can acheive runtime Polymorphyism(Method Overriding).
}

Encapsulation{
    Check this(PPT\31.png)
    Privte key word used for a varible means it can be used only insde that class no one outside it cant use.
    use getter and setter methods
    So to access it we can create a new method and return that private vaariable in the same class then u can call that method and acess that using obj.
    Check this(Ref\36.png)(Ref\53.png).
    Making the class components robust(strong).
}

Polymorphyism{
    Check this(PPT\32.png)(PPT\33.png)
    Many behaviours.
    Compile time(Early binding),Runtime(Late binding)
    behaviour is defined at Compile time it is CT
    behaviour defined at Runtime it is RT 
    Overloading is a part of compiletime(which u decide based on ur parameter at the compile time itself)
    Overriding is a part of  runtime (we are not sure which method we will call becasue both will have same parameters)
    Method overloading{
        only parameter's should be diff, diff return type will not work.
        We can overload main method also.
    }
    
    Method Overriding{
        same name, same parameters and same number of parameters but have differet behaviour.(Ref\D3.java)
        We can overload main method.(Ref\54.png)output is yashtechnologies
    }
}


Super and this methods{
    Check this(PPT\40.png)(Ref\59.png)
    Check this(Ref\60.png)here the output is display method of class SD2 and then display method of class A
    Check this(Ref\61.png)**** because by default super is there in every constructor 
    by default every constructor will have super.
    Super means call the constructor of the super class.
    Every class in java extends Object class by default.
    this will excute the constructor of the same class.
    execution order this(),super();
}


Access Modifiers{
    public means it can be used anywhere
    private means it can be used inside the same class irrespective of the package
    Default means private protected
    Check this(Ref\37.png)
    Check this(Ref\58.png)
    Points to remember{
        u cannot have 2 public classes in same file
        try to keep instance variables private 
        methods most of the time would be public
        if u want a method or variable used only in sub class of other packages then use protected 
        try to avoid default
    }
}




Dynamic method Dispatch{
    U can have child objects for the parent variable.
    Check this.(Ref\D4.java)

}

Final Keyword{
    the moment u make your variable final the variable becomes constant.
    if u make the class final u are stopping in heritence,that means u cannot inherit the final class.
    when u want to override u r method over ride u can make that method public final.
    Check this(Ref\D5.java)

}

Object class equals tostring hashcode{
    Every time u try to print object it will call tostring method.
    to string method returns getClass().getName() @ Integer.toHextString(hashCode())
    Hashing is creating a single variable with all the data that u have.
    So to get the integer value in place of hashcode u can override the method toString by returning the integer variable there.
    Check this(Ref\D6.java)
}

Upcasting adnd Downcasting{
    it is similar to type casting but it is done in diff classes with their objects.(i.e, u can create a parent reference with child object)
    Upcasting can be done implicitly (automatically) 
    Referering parent to child object is called upcasting 
    Downcasting u have to do manually
    Creating reference of child and parent object is called Downcasting
}

Wrapper Classes{
    It converts primitive data types into objects.
    Primitive Dataypes dont extend object class.
    for every primitive type we are going to have class for it and that class extends object class
    autoboxing means primitive type to object type.
    unboxing object type to primitive type.

}

Abstraction{
    Check this(PPT\34.png)(PPT\35.png).
    if u want to just declare a method u should use abstract. 
    abstract method can belong only to abstract class.
    So after decalring the abstract method in the abstract classs now u will extend that class in another class and define that abstract method.
    U cannot create an object of an abstract class.
    U can create a reference of a abstract class.
    if u wannt to create an object u have to use the child class where u have defined that abstract method.
    Abstract class need not have abstract method.
    But abstract methods can't be left unimplemented they should be implemented i.e, it is compulsory to define all the abstract methods(to make it work u have to make even the child class abstract,but then u cannot create object of abstract class )
    Non abstract classes are called concrete class.
    U can create object of contrete class but not abstract class.
    Check this diff Encapsulation and Abstraction(PPT\36.png).
}

Inner Class{
    Class inside class which have methods.
    if u compile the code u will get 3 .class files 1 Main class file 2 A class and 3 inner class B with like this A$B.class  
    So to declare the varible of B u have to declare like this A.B obj1;
    but when u say A.B obj1= new B(); it wont work.
    So to create obj of B u need obj of A i.e A.B  obj1= new obj.B();[obj is a object of A]
    but if B is a static class then u can create obj like A.B obj1 = new A.B();
    Only inner classes can be static. 
    Outer classes cannot be static.
}

Anonymous Inner Class{
    class without name.
    implementation is done after object creation there there wont be any name to that class so it is called anonymous class.
    (Ref\D7.java)    here it will call the show() of the new implementation.
    We can use anonymous inner class for abstract class as well.
    Check this(Ref\D8.java).
}

Interface{
    Interface is not a class.
    Methods in Interface are public abstract.
    u can create referece variables of interface but cannot create object for them.
    U have to implement the methods in different class by impleting that interface.
    Every variables that u create in interface are final and static.
    Interface dont have own memory in heap,thats why we cannot create object. if we dont have memory how can we have non final variable(So the varibles in interface are final)
    In class u can have multiple implements.
    to extend one interface to another u should used extends keyword.
    There are 3 Different Interfaces(Normal[2 or more methods in a interface],Functional/SAM(Single absract method)[1 method in interface,u can use @FunctionalInerface annotation to declare that interface as functional and then u cannot add more than one method],Marker[0 methods in interface])
    (Ref\D14.java){Anonymus Inner class}
    Check this(PPT\37.png)(Ref\D9.java)
    Code example(Ref\56.png)output is in demo class
    Multiple inheritence can be acheived by Interface (Ref\57.png).
    updates in java8,9(PPT\38.png)
    diff btw abstract and Interface(PPT\39.png)

}

Enums{
    enums are named constants which we create.
    when you know that we have a specific error codes,or when you have a specific constants, which you want to use, instead of creating a different object by yourself, you can create a enum.
    Of course you can create a class and you can create multiple objects of it.
    Basic example(Ref\D10.java)
    if else and switch(Ref\D12.java)(Ref\D13.java)
}

Annotations{
    @override
}

Lambda Experssions{
    it is a shortcut way to create small functions that you can pass around like any other piece of data.
    Check this(Ref\D15.java)(Ref\D16.java)(Ref\D25.java)
    if u are having single line no need to specify return keyword also u can directly enter statement it will return it.
    It can be used only for funtional Interfaces.
    it saves the amount of files which you create.
    Of course the demo.java file will be quite heavy now,if you compare the file size before using Lambda expression,after using Lambda expression,the demo file size will increase,but it will not create a new file.
    Okay, so less files to manage.
}

Exceptions{
    Exceptions are something that u can handle,where errors(examples thread dead,IOError,Virtual Machine Error,Outofmemory) u cannot.
    Compile time Exception(erros found after compiling)
    Logical Time Exception()
    Runtime Exception(excecution stops running)(for these we do Exception handling)
    Runtime exceptions are unchecked exceptions(ur whish to handle or not)
    SQLExcetions IO exceptions are checked exceptions(Must handle the exceptions)
    Exceptions Hierachy Object->Throwable=>1.Error,2.Exceptions.
    Try Catch{
        Runtime errors can be handled using try-catch blocks.
        (Ref\D17.java)
        (Ref\D18.java)
        if try is there there should be catch, but if u dont want to use catch u can use finally block also.
        Finally{
            irrespective of exception or not it will exceute this block
            and used to close the resources,files,db etc..
        }
        Try with resources 
    }
    Throw{
        it is used to throw an error 
        (Ref\D19.java)
        Custom Exeptions(Ref\D20.java)
    }
    Throws{
        You know, when you work for the company,there are some employees that don't take responsibility of what went wrong.
        They will simply say, hey, talk to my manager, right?So the same thing is happening here.
        It says, hey, I'm not responsible to handle the exception,talk to my manager, which is main because main is calling show. So it is main's responsibility to handle the exception and that's why you can see we got an error here, it says unhandled exception.
        Used for unchecked exceptions
        Cannot throws exception to main method
    }
    Stacktrace{
        Basically what it does is it prints the entire stack, which method is calling which method, and you can actually track the entire method calls so that you know because of which method the problem has been arised
        you can see this is the entire stack.
        So it's helpful to debug the application,
    }
}

Threads{
    It is actually dividing a task into parts.(Open task manager task have mutiple threads using)
    Threads are the smallest unit that u can work with.
    if u want to excecute 2 things at a time then U can use threads.
    to make a class Thread extend Thread.
    then that class sould have a method called run and then u should create a objcet of that class and using that ref variable call start ie obj.start() then it will call run automatically.
    Check this(Ref\D21.java).
    Scheduler it is some thing which tread will work for how much time and allocate the time to threads to work without flaws.
    U can set priorities to the thread by using setPriority
    to make the thread wait we can use sleep method in milli seconds (Ref\D22.java)
    {
        If ur are working with threads work with data which is immutable and if u think that there is a method which can make it thread safe.
        Joins(){
            In this example (Ref\D26.java) before joins() the output will be 0 because the print statement is called wihtout giving threads time, but we need 2000 according to our code, so this join() helps to wait for the threads to excecute and then it the Print statement will be printed(less than 2000).
            but the output should be 2000 exactly, So here when these 2 threads are being called then there might be some incremations where both might collide only one will be incremented in them.
            So to over come this we can add synchronize key word to the method.(Ref\D27.java)
        }
    }
    States{
        every time you create a new thread,that goes into a new state.
        we also have something called a runnable state.Then we have a waiting state,or we can also say block state.
        nd then the last state we have is dead.
        So we have all the states available for the thread.
        // when you create a new thread example in the code,if you remember when we said thread T1 equal a new thread,at that point it becomes into the new state.
        // Now, the moment you say start,we have this method which is called start.
        // So when you say start, it goes to a runnable state.So maybe we can say start.So when you say start it says it goes into a runnable state.
        // Now there's a difference between runnable state and running.The difference is when your threadis actually running on the CPU, that is running state.But when your thread is executing and then it is waiting for the scheduler,that is into a runnable state.
        // So example, when your thread is running with the help of run method, that is your running state.
        // Now what if, while you are running this,and then maybe you want to keep a on hold with the help of sleep method.So that goes into waiting state.
        // Now, apart from sleep, we also have a method like wait,which can make it go into waiting state.
        // So when your thread is running state,you can also say wait,now wait, will take it to the waiting state,now, how will you come back?Now you will come back with the help of notify.The only thing is when you say notify,you will not come back to running state.You will go into runnable state.
        // Now, whenever the scheduler is assigning you the task,or whenever schedule says it's your turn,at that point it'll go into running state.
        // In fact, if your thread is runningand  if you want to keep it there, you can also say stop.
        // There's also stop method available,but that is deprecated, actually don't stop threads.It'll create instability in your software.But yeah, once the thread work is over,it'll automatically go into stop state.
        // You can also send a thread from the runnable to dead,even with the help of stop, even, you can do that.

            Okay, so basically we have this option.So whenever you create a thread that is good,that goes into a new state,and then when you say start, it goes into enable.
            Now, depending upon your availability of your CPU,that goes into running state.
            Now while running it'll execute certain things and then if at that point, if you want to say, wait, you can do that with the help of sleep or you can do that with the help of wait.
            Now, the only thing is when you say wait, you have to use a notify method to come back.
            The only thing is when you say notify it'll not come back to running state it'll go to the runnable state.
            So it goes from the waiting to runnable,from running, to waiting, waiting to runnable,that's the cycle it followsand then again from runnable to running state.These are the states available.
    }    

}

Runnable{
    Thread is a class which implements Runnable interface(which has run() method in it)
    1st thing is u can extend threads and u can implement Runnable.
    So lets say u have 2 classes A(already extended Thread class) , B and u want to extend B class also(u cannot because java dosent support multiple inheritence), So here u can use Runnable interface and implement it in class A with run() method so that it will staisfy the interface need aslo(that u have to define the interface methods in implemented class).
    So basically whenever you want to create a Thread, we have two choice.
    You can extend a Thread class or you can implement a Runnable interface.
    The only thing is this Runnable interface will not have the Thread methods.
    In that case, you need to create a separate Thread objectand then we can use these features.
    Check this example(Ref\D23.java) changing this into lamdaexpressions (Ref\D24.java)

}

Collection{
    collection API -> concept
    Collection -> Interface
    Collections -> Class
    Collections belongsto util package.
    API simply means a library or some feature,which you can simply use it.You don't have to implement them.
    Collections work with the wrapper classes.
    Check this (Ref\65.png) Collection is a interface and List Queue Set are also interfaces that implemnt Collection and individuallu these interfaces have their own class implementation.
    and on top of Collection we have Itreator top most interface.
    We can convert collection into array.
    We dont have indexing for collection interface.
    We can directly print collection without loop.
    By default collection api works with objects.
    List/Array List{
        So to specify the datatype that u are working with u can use angluar barckets<>.
        and on of the reason to sepcify the data type is lets say in that Array list u added number in "" then it will show error (Run time Error)****
        So to over come it u have to sepcify the data type then it will show the (Compile time error)***
        if u want to work with indexing u can use List in place of Collection(Check this (Ref\D28.java))
        to sort List(Ref\D31.java)
    }
    Set/Hash Set/Linked HashSet{
        to have unique values in list we will use Set.
        Set will not give u the output in sorted format and have no index value.
        So get sorted values u ccan use TreeSet in place of HashSet
        Concept of Iterator Interface is in this Down code.
        Check this(Ref\D29.java)
    }
    Map{
        Map is a collection of Key, Value pairs.
        HashMap and HashTable both are alomost same but hash table is synchronized.(when u r working with mutiple threads u can use hashtable)
        Keys are unique,So if u want to update the value it will take the latest one.
        Keys are actually a set and values are the list.
        We use put instead of add is put means try. let say u already have the key then u can replace it.
        it not follow the sequence.
        Check this(Ref\D30.java)
    }
    Compartor
    {
        Comparator is basically a interface that help u make ur own logic in Sorting.
        In comparator interface u will have compare method. int compare(T,T) where T is the type.
        So in generall sorting involves swapping. So to our logic if it satisfies it will swap(return 1) and if not it will not swap(return -1).

        Question: 72,31,29,43 So now u ahve to sort the values using the last digit i.e, 31,72,43,29.(Ref\D32.java)
        Sorting students based on their ages (Ref\D33.java) lambda expressions used (Ref\D35.java)
    }
    #####Comparable{
        If you want to give a power to the class itself to compare itself or to compare its object to itself.
        by default Integer class by default implements comparable class So by default sort works with integers.
        Check this(Ref\D34.java).

    }
}

Aggregation{
    Checkthis(Ref\62.png)(Ref\63.png)
}

Serialization and Deserialization{
    Serialization (Packing):
        Takes a complex object (like clothes, toiletries, books)
        Converts it into a simple format (neatly folded and packed items)
        Stores it as a stream of bytes (your packed suitcase)
        Can be saved to a file or sent over a network

    Deserialization (Unpacking):
        Takes the stream of bytes (your packed suitcase)
        Reads and interprets the data
        Reconstructs the original object (unpacked items back to original state)
        Makes the object usable again in the program

    Real-world analogy:
        When you save a game, your character's state (position, health, inventory) is serialized
        When you load the game later, this data is deserialized to restore your character

    Key points:
        Only objects that implement the Serializable interface can be serialized
        The process maintains object relationships and inheritance

    Useful for:
        Saving program state to files
        Sending objects over networks
        Creating deep copies of objects
        Caching data
        Transferring data between different systems
}

JDBC{
    JDBC is a API, it is a part of Java Developemnt Kit.
    File-->Project Structure-->Libraries-->add that Jar file.
    in SRC create class file in main method add
    1. import package
    2. Connection con = DriverManager.getConnnection(url,uname,pass);

        String url= "jdbc:postgresql:localhost:5432/demo";
                    //"jdbc:DBsoftware/localhost:portnum of that DB/DB name";
        String uname="postgres"; //uname u have
        String pass="0000"; //pass u gave
        S.O.P("Connection Established");
    3.Create Statement:

}

Hibernate{
    ORM frame work(Object Relational Mapping)
    create a project in maven and add jarfile(Postgresql) and hibernate dependencies in POM file

}


Spring{
    Beans are the basically the objects that are managed by Spring Framework.
    The num of beans u created the num of objects are created.even if u create 2 beans for same class it will create object for that.
    Scope {
        it is a type where we can kind of decide the number of objects can be created whn getBeans is called. 
        Prototype--> new obj every time getBean is called,obj will be created whn u say getBean only. 
        Singelton--> same obj is called.it will create the obj by default.
    }
    Setter Injections {
        (<property name="age" value="21"></property>)  variable name and value for primitve datatypes, even the variable is private.
        So here basically it will 1st create the obj,then call setter method.
    }
    Reference Attribute 
    {
        same as Setter Injection but for non-Primitive data type.
        In place of value u have to use ref and its name should be equal to that id of that bean.
    }    
    Constructor Injection{
        Same like Setter Injections and Ref Attribute but used for constructors
    }
    
}